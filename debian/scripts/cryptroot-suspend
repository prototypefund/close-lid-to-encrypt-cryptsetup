#!/bin/sh

set -e -u
trap 'echo "Press ENTER to continue."; read dummy' ERR

################################################################################
## Parameters and helper functions

INITRAMFS_DIR=/run/cryptroot-suspend
SYSTEM_SLEEP_PATH=/lib/systemd/system-sleep
BIND_PATHS="/sys /proc /dev /run"
REMOUNT=0
# Retrieve cryptdevice name from boot cmdline
CRYPTNAME="$(sed -n 's/.*cryptdevice=[^: ]*:\([^: ]*\).*$/\1/p' /proc/cmdline)"
ROOTDEV=$(sed -n 's/.*root=\([^ ]*\).*/\1/p' /proc/cmdline)

# run_dir DIR ARGS...
# Run all executable scripts in directory DIR with arguments ARGS
run_dir() {
    local dir=$1
    shift
    find "${dir}" -type f -executable -exec "{}" "$@" ";"
}

# Prepare chroot
prepare_chroot() {
    mkdir -p ${INITRAMFS_DIR}
    mount -t tmpfs none ${INITRAMFS_DIR}

    # initramfs hook functions don't play well with 'set -u'
    set +u
    DESTDIR="$INITRAMFS_DIR"
    . /usr/share/initramfs-tools/hook-functions

    copy_exec /lib/cryptsetup/askpass
    copy_exec /sbin/cryptsetup
    copy_exec /bin/sync
    copy_exec /bin/dash
    copy_exec /bin/udevadm
    copy_exec /usr/share/cryptsetup/initramfs/bin/cryptroot-suspend /suspend
    ln -s ${INITRAMFS_DIR}/bin/sh /bin/dash
    set -u

    local p
    for p in ${BIND_PATHS}; do
        mkdir "${INITRAMFS_DIR}${p}"
        mount -o bind ${p} "${INITRAMFS_DIR}${p}"
    done
}

# Restore chroot
umount_initramfs() {
    local p
    for p in ${BIND_PATHS}; do
        ! mountpoint -q "${INITRAMFS_DIR}${p}" || umount "${INITRAMFS_DIR}${p}"
    done
    ! mountpoint -q "${INITRAMFS_DIR}" || umount "${INITRAMFS_DIR}"
    rmdir ${INITRAMFS_DIR}
}

ext4_cryptdevice_mount_options() {
    local mt="$(grep "^${1} " /proc/mounts | cut -d ' ' -f 3,4)"
    if [[ "${mt:0:5}" == "ext4 " ]]; then
        echo "${mt:5}"
    fi
}

################################################################################
## Main script

#[ -e "${INITRAMFS_DIR}/suspend" ] || exec /lib/systemd/systemd-sleep suspend

# Prepare chroot
#trap umount_initramfs EXIT
prepare_chroot

# Run pre-suspend scripts
run_dir "${SYSTEM_SLEEP_PATH}" pre suspend

# Stop udev service and prevent it to be autostarted.
# Otherwise, luksResume will hang waiting for udev, which is itself waiting
# for I/O on the root device.
systemctl stop systemd-udevd-control.socket
systemctl stop systemd-udevd-kernel.socket
systemctl stop systemd-udevd.service

# Stop journald, otherwise suspend hangs forever
systemctl stop systemd-journald.socket
systemctl stop systemd-journald-dev-log.socket
systemctl stop systemd-journald.service

# Journalled ext4 filesystems in kernel versions 3.11+ will block suspend
# if mounted with `barrier=1`, which is the default. Temporarily remount with
# `barrier=0` if this is true of the crypt fs.
MOUNT_OPTS="$(ext4_cryptdevice_mount_options "$ROOTDEV")"
if [[ "$MOUNT_OPTS" ]] && ! [[ "$MOUNT_OPTS" == *nobarrier* || "$MOUNT_OPTS" == *barrier=0* ]]; then
    REMOUNT=1
    mount -o remount,"$MOUNT_OPTS",barrier=0 /
fi

# Hand over execution to script inside initramfs
cd "${INITRAMFS_DIR}"
exit 0
chroot . /suspend "$CRYPTNAME"

# Restore original mount options if necessary
if ((REMOUNT)); then
    mount -o remount,"$MOUNT_OPTS",barrier=1 /
fi

# Restart journald
systemctl start systemd-journald.service
systemctl start systemd-journald-dev-log.socket
systemctl start systemd-journald.socket

# Restart udev
systemctl start systemd-udevd-control.socket
systemctl start systemd-udevd-kernel.socket
systemctl start systemd-udevd.service

# Run post-suspend scripts
run_dir "${SYSTEM_SLEEP_PATH}" post suspend

# Unlock user sessions
loginctl unlock-sessions
